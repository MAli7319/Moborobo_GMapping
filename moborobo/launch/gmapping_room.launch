<?xml version="1.0"?>
<launch>

    <param name="robot_description" command="$(find xacro)/xacro '$(find moborobo)/description/robot.udrf.xacro'" />

    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(find moborobo)/world/work.world"/>
    </include>

    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model"  args="-param robot_description -urdf -model moborobo" />

    <node name="Rsp" pkg="robot_state_publisher" type="robot_state_publisher" output="screen"/>

    <node name="Joint_tester" pkg="rviz" type="rviz" output="screen" args="-d $(find moborobo)/config/map.rviz"/>


    <!---<node pkg="gmapping" type="slam_gmapping"  name="slam_gmapping" output="screen">
    	<param name="map_frame" value="map" />	
        <param name="base_frame" value="base_link" />
        <param name="odom_frame" value="odom" />
        <rosparam command="load" file="$(find moborobo)/config/gmapping_params.yaml" />
        <param name="delta" value="0.1" />
    </node>-->

    <node pkg="move_base" type="move_base" name="Base_move" output="screen">
        <param name="controller_frequency" value="10.0" />
        <rosparam file="$(find moborobo)/config/costmap_common_params.yaml" command="load" ns="global_costmap"/>
        <rosparam file="$(find moborobo)/config/costmap_common_params.yaml" command="load" ns="local_costmap"/>
        <rosparam file="$(find moborobo)/config/local_costmap_params.yaml" command="load" />
        <rosparam file="$(find moborobo)/config/global_costmap_params.yaml" command="load" />
        <rosparam file="$(find moborobo)/config/trajectory_planner.yaml" command="load" />
      </node>

      <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan">
        <remap from="cloud_in" to="rs_points"/>
        <rosparam>
          target_frame: camera_link
          transform_tolerance: 0.01
          min_height: 0.0
          max_height: 1.0
          
          angle_min: -3.14
          angle_max: 3.14
          angle_increment: 0.0087
          scan_time: 0.1
          range_min: 0.45
          range_max: 10.0
          use_inf: true
          
          #concurrency_level affects number of pc queued for processing and the number of threadsused
          # 0: Detect number of cores
          # 1: Single threaded
          # 2: inf : Parallelism level
          concurrency_level: 1
        </rosparam>
    </node>
    
    <!--  GPS   -->
    <node pkg="moborobo" name="locoSysPublisher" type="locoSysPublisher.py" output="screen"/>
    <node pkg="moborobo" name="locoSysSubscriber" type="locoSysSubscriber.py" output="screen"/>

    <!--<arg name="output_final_position" default="false"/>
    <arg name="output_location" default="~/dual_ekf_navsat_example_debug.txt"/>

    <node pkg="robot_localization" type="ekf_node" name="ekf_filter_node_odom" output="screen">
        <param name="rl_params_file" value="$(find moborobo)/config/dual_ekf_navsat_params.yaml"/>
        <param name="use_sim_time" value="true"/>
        <remap from="odometry/filtered" to="odometry/local"/>
    </node>

    <node pkg="robot_localization" type="ekf_node" name="ekf_filter_node_map" output="screen">
        <param name="rl_params_file" value="$(find moborobo)/config/dual_ekf_navsat_params.yaml"/>
        <param name="use_sim_time" value="true"/>
        <remap from="odometry/filtered" to="odometry/global"/>
    </node>

    <node pkg="robot_localization" type="navsat_transform_node" name="navsat_transform" output="screen">
        <param name="rl_params_file" value="$(find moborobo)/config/dual_ekf_navsat_params.yaml"/>
        <param name="use_sim_time" value="true"/>
        <remap from="imu/data" to="imu/data"/>
        <remap from="gps/fix" to="gps/fix"/>
        <remap from="gps/filtered" to="gps/filtered"/>
        <remap from="odometry/gps" to="odometry/gps"/>
        <remap from="odometry/filtered" to="odometry/global"/>
    </node>-->
</launch>
